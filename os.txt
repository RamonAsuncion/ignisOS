planning hobby kernel

this is a multiyear project.

x86 monolithic OS

- compiler : gcc cross-compiler
- assembler: nasm
- linker   : gnu ld
- emulator : qemu

developing on debian

- https://wiki.osdev.org/GCC_Cross-Compiler
- https://wiki.debian.org/QEMU

setup
  - sudo apt install build-essential gcc-multilib nasm make binutils
  - sudo apt install qemu-utils qemu-system-x86 qemu-system-gui

bootloader

load everything needed to boot. this is not part of the os.
this is part of the boot process.

real mode -> protected mode
- bios boot process (MBR 512 bytes)
- bootloader (grub vs custom)
- real mode (first 512 bytes MBR)
  - final sinature in the boot sector 0xAA55
- bootloader switches to protected
  - jump to C function
  - idt and isrs

kernel gets control at entry

  assembly
    - writing custom bootloader
      - setup the cpu for protected mode
      - load kernel into memory
      - jump to it

kernel basics

monolithic kernel where everything runs in kernel space (device drivers, file system, scheduler, memory management etc...)

intending to do everything else in c.

- kernel main function
- print (text output)
- gdt and idt
- memory manageement (paging, heap)
- pit and keyboard driver then I can support multiple fs later.
- schedule / multitasking
  - probably avoid multitasking and make it single-threaded and non-preemptive
- shell (using my ishell but prob have to change readline)
- system calls

full kernel privileges no separation between user programs and kernel code.

file system

using fat since its simple. probably going with FAT12 before implemtning other file systems (FS) then I can support multiple fs later.

http://www.fysnet.net/docs/fatgen103.pdf
https://forum.osdev.org/viewtopic.php?t=20861

my goal at the end of this os is to port python.

- https://www.youtube.com/watch?v=Hb37FcfdfJc
- https://www.reddit.com/r/osdev/comments/1ji3qav/just_got_ls_working_in_usermode/

references:

where to begin?
- https://wiki.osdev.org/Getting_Started
- https://wiki.osdev.org/Beginner_Mistakes
- https://wiki.osdev.org/Required_Knowledge

- against bootloaders? https://forum.osdev.org/viewtopic.php?t=33769
- protected mode https://en.wikipedia.org/wiki/Protected_mode
